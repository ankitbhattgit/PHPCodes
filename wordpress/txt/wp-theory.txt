

wp loading process

the process begins with index.php

index.php

    Defines a constant WP_USE_THEMES
    Includes wp-blog-header.php


    wp-blog-header.php

            Includes wp-load.php
            Calls wp()
            Includes template-loader.php

        The wp() function initialises the WP class object. And the template-loader.php (present in wp-includes) initialises page templates. But before all of this happens, WordPress is loaded by wp-load.php.

        wp-load.php

        You’ll notice the ABSPATH constant being defined in this file. This constant can be used in plugin or theme development to reference the path of the root directory.

        Next, the wp-load.php loads the wp-config file. If the wp-config.php file does not exist, you’ll be prompted to create one (like you had to while installing WordPress).

        A little piece of trivia: To load the config file it searches either in the same path or a level above. Sometimes the wp-config file is placed in a directory above the ‘wordpress’ directory level for security purposes.


        wp-config.php

         This file contains the following:

        The database settings- the database name, username, password,
        The Auth Keys- automatically generated and used for cookies and authentication
        The database table prefix
        The WP_DEBUG constant to turn on debugging mode
        The wp-settings.php

The wp-settings.php is where all the magic happens. :-)

WordPress fires a hook ‘init’ as soon as most of WordPress is loaded, and the current user is authenticated, but before the headers are sent. As a WordPress developer, you’ll have be familiar with the init hook. This hook is used to instantiate plugins.

As a WordPress developer, if you want to hook into WordPress before other plugins are loaded, use the muplugins_loaded hook.

If you want to hook into WordPress after WordPress is completely loaded, and once the plugins and theme are initialized, use the wp_loaded hook.

init



How wordpress displays page


If a visitor goes to your home page at http://example.com/blog/, the following happens:

WordPress first determines whether it has a static front page. If a static front page has been set, then WordPress loads that page according to the page template hierarchy.
If a static front page has not been set, then WordPress looks for a template file called home.php and uses it to generate the requested page.
If home.php is missing, WordPress looks for a file called index.php in the active theme's directory, and uses that template to generate the page.



Single Post display

Template file used to render a single post page.

single-{post_type}.php - If the post type were product, WordPress would look for single-product.php.
single.php
index.php


Page display

Template file used to render a static page (page post-type)

custom template file - The Page Template assigned to the Page. See get_page_templates().
page-{slug}.php - If the page slug is recent-news, WordPress will look to use page-recent-news.php
page-{id}.php - If the page ID is 6, WordPress will look to use page-6.php
page.php
index.php



Category display

Template file used to render a Category Archive Index page

category-{slug}.php - If the category's slug were news, WordPress would look for category-news.php
category-{id}.php - If the category's ID were 6, WordPress would look for category-6.php
category.php
archive.php
index.php



Generally speaking, the WordPress tables and their responsibilities are as follows:
wp_comments: Where comments are stored
wp_commentmeta: Meta data associated with each comment
wp_links: Where data is stored based on WordPress Links
wp_options: All of the options under Administration > Settings are stored here
wp_posts: Post and Page data are stored here
wp_postmeta: Meta data associated with each post
wp_terms: Categories and Tags for both posts and pages
wp_term_relationships: Data representing the relationship between posts, categories, and tags
wp_term_taxonomy: Descriptions for tags, links, and/or categories as stored in wp_terms
wp_users: Where each user account is stored
wp_usermeta: Meta data associated with each user.



diff between template ande theme

Template
In WordPress a template is a file that defines an area of the web pages generated by a theme. For example, there is typically a template for the header area at the top of the web pages, a template for the content, a template for the sidebars, and so on. The templates are like building blocks that make up the complete web page.

Theme
A theme is a collection of files that work together to produce a graphical interface with an underlying unifying design for a weblog. A theme modifies the way the weblog is displayed, without modifying the underlying software. Essentially, the WordPress theme system is a way to skin your weblog.



get_template_part


 Simply put, get_template_part is just a way to include another file.

get_template_part( 'loop', 'index' );


get_template_part( $slug, $name );

Where the slug is the generic name of the template being called, and name is the specialized name of the template being called.  So there is an order that WordPress would use to try to find the template to use.  Properly named files in your child theme come first, then files in your parent theme are used.  So using the example above with the generic name ‘loop’ and the specialized name ‘index’ here is the order WordPress would look for files.

wp-content/themes/twentytenchild/loop-index.php
wp-content/themes/twentytenchild/loop.php
wp-content/themes/twentyten/loop-index.php
wp-content/themes/twentyten/loop.php






Home Page display

Template file used to render the Blog Posts Index, whether on the site front page or on a static page. Note: on the Site Front Page, the Front Page template takes precedence over the Blog Posts Index (Home) template.

home.php
index.php
Front Page display

Template file used to render the Site Front Page, whether the front page displays the Blog Posts Index or a static page. The Front Page template takes precedence over the Blog Posts Index (Home) template.

front-page.php - Used for both Your latest posts or A static page as set in the Front page displays section of Settings -> Reading
Page display rules - When Front page is set in the Front page displays section of Settings -> Reading
Home Page display rules - When Posts page is set in the Front page displays section of Settings -> Reading
Single Post display


A PAGE Page
This section refers to WordPress Pages, not any generic webpage from your blog, or in other words to the built in post_type 'page'.

is_page()
When any Page is being displayed.
is_page( 42 )
When Page 42 (ID) is being displayed.
is_page( 'About Me And Joe' )
When the Page with a post_title of "About Me And Joe" is being displayed.
is_page( 'about-me' )
When the Page with a post_name (slug) of "about-me" is being displayed.
is_page( array( 42, 'about-me', 'About Me And Joe' ) )
Returns true when the Pages displayed is either post ID = 42, or post_name is "about-me", or post_title is "About Me And Joe".
is_page( array( 42, 54, 6 ) )
Returns true when the Pages displayed is either post ID = 42, or post ID = 54, or post ID = 6.





Display WordPress Widgets Conditionally In Particular Pages


Different Sidebar File

For example, let’s say we have a Contact page, and we want to have the sidebar in this page to be different from the sidebar of other pages. In this situation, we can create a new sidebar file, and name it something like sidebar-contact.php.


Then, in the contact template file, we can call our new sidebar, this way.

get_sidebar( 'contact' );


Using Conditional Tags

Below is an example of code that you can add in page.php; this code will show the Contact sidebar in the contact page, while showing regular sidebars for the other pages.


if ( is_page('contact') ) {
    get_sidebar( 'contact' );
} else {
    get_sidebar();
}



sessions with wp

Web application is stateless, which means once the request is fulfilled, all variables involved during the request will be gone. With session, data that is used during a request can be stored inside a text file on web server. When needed in different request, this data can be read so it will be available to be used during this new request.The text file used to store the session is unique, meaning it is tied to the browser session. As long as you are using the same browser session, the file will be the same. However, once you close the browser, next time you access the same information, you will be assigned different session file.In order for the web server to know which session file belong to which browser session, the web server sends a cookie which contains the name of the session. This cookie is set to expire at the end of the session. That is why when you restart your browser, you will be assigned different session file. After calling session_start, the web server will check first if the browser sends the session cookie. If yes, the web server will check if it has the session file associated with the value in that session cookie. If yes, that session file will be used, if not, a new session file will be created. If the browser does not send the session cookie, a new file will be created and the web server will send the session cookie to the browser so on the next request, the browser can send that session cookie back.


The WordPress platform is totally stateless and provides no support for the use of sessions outside of the cookie that keeps a user logged in.


Getting access to the session


wp-config.php

if (!session_id())
    session_start();


But of course It’s a plugin that needs a session

You can’t put your session_start in wp-config.php if you are intending to distribute your code to others, since you have no access to it and your users might have register_globals set.  In that case you need to hook into an action that takes place after WordPress is loaded but before your code needs the session.

You can hook into the “init” action, to do that you would add some code like this to your plugin or your theme’s functions.php:

add_action('init', 'myStartSession', 1);
add_action('wp_logout', 'myEndSession');
add_action('wp_login', 'myEndSession');

function myStartSession() {
    if(!session_id()) {
        session_start();
    }
}

function myEndSession() {
    session_destroy ();
}



$_SESSION['myKey'] = "Some data I need later";

if(isset($_SESSION['myKey'])) {
    $value = $_SESSION['myKey'];
} else {
    $value = '';
}



Difference between do_action and add_action



add_action it is used to to hook our function to the specified function. For example add_action('wp_head'.'myfunc'); now what ever code in myfunc will be executed in the wp_head().

Use do_action( 'unique_name' ) to create your own actions.

add_action() tells WordPress to do something when it arrives at the specified do_action() hook.